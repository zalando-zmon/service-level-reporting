swagger: "2.0"

info:
  title: ZMON service level reporting
  version: "0.3"
  description: Service level reporting is a tool built around ZMON to generate Service Level reports
  contact:
    name: team-eagleeye

basePath: /api

consumes:
  - application/json

produces:
  - application/json

securityDefinitions:
  oauth2:
    type: oauth2
    flow: password
    tokenUrl: ""
    scopes:
      uid: Unique identifier of the user accessing the service.

security:
  # enable OAuth protection for all REST endpoints
  # (only active if the HTTP_TOKENINFO_URL environment variable is set)
  - oauth2: [uid]

definitions:
  Meta:
    properties:
      next_uri:
        type: string
        readOnly: true
        description: Pagination next URI
      previous_uri:
        type: string
        readOnly: true
        description: Pagination previous URI
      count:
        type: number
        readOnly: true
        description: Total number of resources

  APIRoot:
    properties:
      health_uri:
        type: string
        readOnly: true
        description: Health resource URI
      session_uri:
        type: string
        readOnly: true
        description: Session resource URI. Info about logged in user.
      product_groups_uri:
        type: string
        readOnly: true
        description: Product Groups URI
      products_uri:
        type: string
        readOnly: true
        description: Products URI

  ProductGroupList:
    properties:
      _meta:
        $ref: '#/definitions/Meta'
      data:
        type: array
        items:
          $ref: '#/definitions/ProductGroup'

  ProductGroup:
    properties:
      name:
        type: string
        description: The actual name for the product group.
      department:
        type: string
        description: The department of the product group.
      slug:
        type: string
        description: Product group slug.
        readOnly: true
      username:
        type: string
        readOnly: true
        description: User name created the resource.
      created:
        type: string
        readOnly: true
        description: Created datetime.
      updated:
        type: string
        readOnly: true
        description: Updated datetime.
      uri:
        type: string
        readOnly: true
        description: Self reference URI (e.g /product-groups/110)

  ProductList:
    properties:
      _meta:
        $ref: '#/definitions/Meta'
      data:
        type: array
        items:
          $ref: '#/definitions/Product'

  Product:
    properties:
      name:
        type: string
        description: Product name.
      email:
        type: ["string", "null"]
        description: Product owner email. This could be used in notifications.
      product_group_uri:
        type: string
        description: Product Group URI (e.g. /product-groups/110)
      slug:
        type: string
        readOnly: true
        description: Product slug.
      product_group_name:
        type: string
        readOnly: true
        description: Product Group name.
      product_group_slug:
        type: string
        readOnly: true
        description: Product Group slug.
      username:
        type: string
        readOnly: true
        description: User name created the resource.
      created:
        type: string
        readOnly: true
        description: Created datetime.
      updated:
        type: string
        readOnly: true
        description: Updated datetime.
      uri:
        type: string
        readOnly: true
        description: Self reference URI (e.g /products/3)
      product_sli_uri:
        type: string
        readOnly: true
        description: Product SLI URI (e.g /products/3/sli)
      product_slo_uri:
        type: string
        readOnly: true
        description: Product SLO URI (e.g /products/3/slo)
      product_reports_uri:
        type: string
        readOnly: true
        description: Product Reports URI (e.g /products/3/reports)
      product_reports_weekly_uri:
        type: string
        readOnly: true
        description: Product Reports URI (e.g /products/3/reports/weekly)

  SLIList:
    properties:
      _meta:
        $ref: '#/definitions/Meta'
      data:
        type: array
        items:
          $ref: '#/definitions/SLI'

  SLI:
    properties:
      name:
        type: string
        description: SLI name.
      source:
        type: object
        description: |
          {
            "check_id": 2017,
            "aggregation": {"type": "average"},
            "keys": ["latency.p99", "requests_count"],
            "tags": {"application_id": ["app-1"]}
          }
      unit:
        type: string
        description: SLI unit (s, ms, %).
      aggregation:
        type: string
        readOnly: true
        description: Aggregation type (retrieved from source for convenience)
      product_name:
        type: string
        readOnly: true
        description: Product name
      slug:
        type: string
        readOnly: true
        description: SLI slug.
      username:
        type: string
        readOnly: true
        description: User name created the resource.
      created:
        type: string
        readOnly: true
        description: Created datetime.
      updated:
        type: string
        readOnly: true
        description: Updated datetime.
      uri:
        type: string
        readOnly: true
        description: Self reference URI (e.g /products/3/sli/33)
      sli_values_uri:
        type: string
        readOnly: true
        description: Product SLI URI (e.g /products/3/sli/33/values)
      sli_query_uri:
        type: string
        readOnly: true
        description: Product SLO URI (e.g /products/3/sli/33/query)

  SLOList:
    properties:
      _meta:
        $ref: '#/definitions/Meta'
      data:
        type: array
        items:
          $ref: '#/definitions/SLO'

  SLO:
    properties:
      title:
        type: string
        description: SLO title.
      description:
        type: string
        description: SLO description.
      id:
        type: integer
        readOnly: true
        description: SLO ID.
      username:
        type: string
        readOnly: true
        description: User name created the resource.
      created:
        type: string
        readOnly: true
        description: Created datetime.
      updated:
        type: string
        readOnly: true
        description: Updated datetime.
      uri:
        type: string
        readOnly: true
        description: Self reference URI (e.g /products/3/slo/333)
      slo_targets_uri:
        type: string
        readOnly: true
        description: Product SLO targets URI (e.g /products/3/slo/333/targets)
      targets:
        type: array
        items:
          $ref: '#/definitions/Target'
        readOnly: true
        description: SLO Targets
      product_name:
        type: string
        readOnly: true
        description: Product name

  TargetList:
    properties:
      _meta:
        $ref: '#/definitions/Meta'
      data:
        type: array
        items:
          $ref: '#/definitions/Target'

  Target:
    properties:
      from:
        type: ["number", "null"]
        description: SLO target lower bound.
      to:
        type: ["number", "null"]
        description: SLO target upper bound.
      sli_uri:
        type: string
        description: Product SLI URI (e.g /products/3/sli/33).
      sli_name:
        type: string
        readOnly: true
        description: Product SLI name
      product_name:
        type: string
        readOnly: true
        description: Product name
      username:
        type: string
        readOnly: true
        description: User name created the resource.
      created:
        type: string
        readOnly: true
        description: Created datetime.
      updated:
        type: string
        readOnly: true
        description: Updated datetime.
      uri:
        type: string
        readOnly: true
        description: Self reference URI (e.g /products/3/slo/333/targets/3333).

  Report:
    properties:
      product_name:
        type: string
        description: Product name
      product_group_name:
        type: string
        description: Product Group name
      department:
        type: string
        description: Product group department
      slo:
        type: array
        items:
          $ref: '#/definitions/ReportSLO'

  ReportSLO:
    properties:
      days:
        type: object
        readOnly: true
        description: |
          {
            "2017-02-16T00:00:00": {
              "sli-name-1": {"min": 10, "max": 100, "avg": 88.9, "count": 19000, "breaches": 1, "unit": "ms", "aggregation": "average"},
              "sli-name-2": {"min": 19090, "max": 20110, "avg": 15558, "count": 19000, "breaches": 0, "unit": "", "aggregation": "max"}
            }
          }
      title:
        type: string
        readOnly: true
        description: 99.5 of requests succeed
      slo_uri:
        type: string
        readOnly: true
      targets:
        type: array
        readOnly: true
        items:
          $ref: '#/definitions/Target'

parameters:
  ResourceId:
    name: id
    type: integer
    in: path
    required: true
    description: Resource ID.

  ProductId:
    name: product_id
    type: string
    in: path
    required: true
    description: Product ID.

  SLOId:
    name: slo_id
    type: string
    in: path
    required: true
    description: SLO ID.

  From:
    name: from
    type: integer
    in: query
    description: Relative start minutes

  To:
    name: to
    type: integer
    in: query
    description: Relative end minutes

  Offset:
    name: page
    type: integer
    in: query
    description: Pagination page.

  Limit:
    name: page_size
    type: integer
    in: query
    description: Pagination page size limit.

  Query:
    name: q
    type: string
    in: query
    description: A query string used in fuzzy filtering.

paths:
  /:
    get:
      tags: [API Root]
      operationId: app.resources.APIRoot.get
      summary: Root API entry point
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/APIRoot'

  /health:
    get:
      tags: [System]
      operationId: app.resources.APIRoot.health
      summary: Return health
      responses:
        200:
          description: Health is OK

  /session:
    get:
      tags: [System]
      operationId: app.resources.APIRoot.session
      summary: Return session info
      responses:
        200:
          description: OK
          schema:
            properties:
              username:
                type: string
                readOnly: true
                description: Current username
              last_login:
                type: string
                readOnly: true
                description: Login datetime

  /product-groups:
    get:
      tags: [Product Group]
      operationId: app.resources.ProductGroupResource.list
      parameters:
        - name: name
          type: string
          in: query
          description: Filter product groups by name.
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/Offset'
        - $ref: '#/parameters/Query'
      responses:
        200:
          description: List of Product Groups
          schema:
            $ref: '#/definitions/ProductGroupList'
        401:
          description: UNAUTHORIZED

    post:
      tags: [Product Group]
      operationId: app.resources.ProductGroupResource.create
      summary: Create a Product Group
      description: Create a product group.
      parameters:
        - name: product_group
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: The name for the new Product Group
                example: Recommendations Platform
              department:
                type: string
                description: The department of the Product Group
                example: Personalization
            required:
              - name
      responses:
        201:
          description: CREATED
          schema:
            $ref: '#/definitions/ProductGroup'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED

  /product-groups/{id}:
    get:
      tags: [Product Group]
      summary: Retrieve a Product Group
      operationId: app.resources.ProductGroupResource.get
      parameters:
        - $ref: '#/parameters/ResourceId'
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/ProductGroup'
        401:
          description: UNAUTHORIZED.
        404:
          description: NOT FOUND.

    put:
      tags: [Product Group]
      operationId: app.resources.ProductGroupResource.update
      summary: Update a Product Group
      parameters:
        - $ref: '#/parameters/ResourceId'
        - name: product_group
          in: body
          required: true
          schema:
            $ref: '#/definitions/ProductGroup'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ProductGroup'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED

    delete:
      tags: [Product Group]
      summary: Delete a Product Group
      operationId: app.resources.ProductGroupResource.delete
      parameters:
        - $ref: '#/parameters/ResourceId'
      responses:
        204:
          description: NO CONTENT.
        401:
          description: UNAUTHORIZED.
        404:
          description: NOT FOUND.

  /products:
    get:
      tags: [Product]
      operationId: app.resources.ProductResource.list
      parameters:
        - name: name
          type: string
          in: query
          description: Filter products by name.
        - name: product_group
          type: string
          in: query
          description: Filter by product group name.
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/Offset'
        - $ref: '#/parameters/Query'
      responses:
        200:
          description: List of Products
          schema:
            $ref: '#/definitions/ProductList'
        401:
          description: UNAUTHORIZED

    post:
      tags: [Product]
      operationId: app.resources.ProductResource.create
      description: Create a new Product
      parameters:
        - name: product
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: The name for the new Product
                example: ZMON
              product_group_uri:
                type: string
                description: Product Group URI
                example: /product-groups/110
            required:
              - name
              - product_group_uri
      responses:
        201:
          description: CREATED
          schema:
            $ref: '#/definitions/Product'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND (Product group does not exist)

  /products/{id}:
    get:
      tags: [Product]
      summary: Retrieve a Product
      operationId: app.resources.ProductResource.get
      parameters:
        - $ref: '#/parameters/ResourceId'
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/Product'
        401:
          description: UNAUTHORIZED.
        404:
          description: NOT FOUND.

    put:
      tags: [Product]
      operationId: app.resources.ProductResource.update
      summary: Update a Product
      parameters:
        - $ref: '#/parameters/ResourceId'
        - name: product
          in: body
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Product'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND

    delete:
      tags: [Product]
      summary: Delete a Product
      operationId: app.resources.ProductResource.delete
      parameters:
        - $ref: '#/parameters/ResourceId'
      responses:
        204:
          description: NO CONTENT.
        401:
          description: UNAUTHORIZED.
        404:
          description: NOT FOUND.

  /products/{product_id}/sli:
    get:
      tags: [SLI]
      description: Get list of Product SLIs
      operationId: app.resources.SLIResource.list
      parameters:
        - $ref: '#/parameters/ProductId'
        - name: name
          type: string
          in: query
          description: Filter SLI by name.
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/Offset'
      responses:
        200:
          description: List of Product SLIs
          schema:
            $ref: '#/definitions/SLIList'
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND (Product does not exist)

    post:
      tags: [SLI]
      operationId: app.resources.SLIResource.create
      description: Create a new Product SLI
      parameters:
        - $ref: '#/parameters/ProductId'
        - name: sli
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: The SLI name
                example: latency_p99
              unit:
                type: string
                description: SLI unit (s, ms, %).
              source:
                type: object
                description: SLI data source
                example: |
                  {
                    "check_id": 2017,
                    "aggregation": {"type": "average"},
                    "keys": ["latency.p99", "requests_count"],
                    "tags": {"application_id": ["app-1"]}
                  }
            required:
              - name
              - source
              - unit
      responses:
        201:
          description: CREATED
          schema:
            $ref: '#/definitions/SLI'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND (Product does not exist)

  /products/{product_id}/sli/{id}:
    get:
      tags: [SLI]
      summary: Retrieve a SLI
      operationId: app.resources.SLIResource.get
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/ResourceId'
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/SLI'
        401:
          description: UNAUTHORIZED.
        404:
          description: NOT FOUND.

    put:
      tags: [SLI]
      operationId: app.resources.SLIResource.update
      summary: Update a Product SLI
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/ResourceId'
        - name: sli
          in: body
          required: true
          schema:
            $ref: '#/definitions/SLI'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SLI'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND

    delete:
      tags: [SLI]
      summary: Delete a Product SLI
      operationId: app.resources.SLIResource.delete
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/ResourceId'
      responses:
        204:
          description: NO CONTENT.
        401:
          description: UNAUTHORIZED.
        404:
          description: NOT FOUND.

  /products/{product_id}/sli/{id}/values:
    get:
      tags: [SLI]
      description: Get list of Product SLIs values
      operationId: app.resources.SLIValueResource.list
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/ResourceId'
        - $ref: '#/parameters/From'
        - $ref: '#/parameters/To'
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/Offset'
      responses:
        200:
          description: List of SLI values
          schema:
            properties:
              _meta:
                type: object
                properties:
                  count:
                    type: number
                    description: Total number of values
              data:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                    value:
                      type: number

        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND (Product does not exist)

  /products/{product_id}/sli/{id}/query:
    post:
      tags: [SLI]
      description: Update Product SLI values
      operationId: app.resources.SLIQueryResource.create
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/ResourceId'
        - name: duration
          in: body
          required: true
          schema:
            type: object
            properties:
              start:
                type: integer
                description: Relative start minutes
                example: 1440
              end:
                type: integer
                description: Relative end minutes
            required:
              - start
      responses:
        200:
          description: List of SLI values
          schema:
            type: object
            properties:
              count:
                type: integer
                description: Number of points updated for this SLI
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND (Product does not exist)

  /products/{product_id}/slo:
    get:
      tags: [SLO]
      description: Get list of Product SLOs
      operationId: app.resources.SLOResource.list
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/Offset'
        - name: id
          type: integer
          in: query
          description: Filter SLO by ID.
      responses:
        200:
          description: List of Product SLOs
          schema:
            $ref: '#/definitions/SLOList'
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND (Product does not exist)

    post:
      tags: [SLO]
      operationId: app.resources.SLOResource.create
      description: Create a new Product SLO
      parameters:
        - $ref: '#/parameters/ProductId'
        - name: slo
          in: body
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
                description: The SLO title
                example: "99.5% of the requests succeed in less than 500 ms"
            required:
              - title
      responses:
        201:
          description: CREATED
          schema:
            $ref: '#/definitions/SLO'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND (Product does not exist)

  /products/{product_id}/slo/{id}:
    get:
      tags: [SLO]
      summary: Retrieve a SLO
      operationId: app.resources.SLOResource.get
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/ResourceId'
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/SLO'
        401:
          description: UNAUTHORIZED.
        404:
          description: NOT FOUND.

    put:
      tags: [SLO]
      operationId: app.resources.SLOResource.update
      summary: Update a Product SLO
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/ResourceId'
        - name: slo
          in: body
          required: true
          schema:
            $ref: '#/definitions/SLO'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SLO'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND

    delete:
      tags: [SLO]
      summary: Delete a Product SLO
      operationId: app.resources.SLOResource.delete
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/ResourceId'
      responses:
        204:
          description: NO CONTENT.
        401:
          description: UNAUTHORIZED.
        404:
          description: NOT FOUND.

  /products/{product_id}/slo/{slo_id}/targets:
    get:
      tags: [Target]
      description: Get list of SLO targets
      operationId: app.resources.TargetResource.list
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/SLOId'
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/Offset'
      responses:
        200:
          description: List of Product SLO targets
          schema:
            $ref: '#/definitions/TargetList'
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND (Product does not exist)

    post:
      tags: [Target]
      operationId: app.resources.TargetResource.create
      description: Create a new Product SLO target
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/SLOId'
        - name: target
          in: body
          required: true
          schema:
            type: object
            properties:
              sli_uri:
                type: string
                description: Product SLI URI (e.g /products/3/sli/33)
              from:
                type: ["number", "null"]
                description: SLO target lower bound.
              to:
                type: ["number", "null"]
                description: SLO target upper bound.
            required:
              - sli_uri
      responses:
        201:
          description: CREATED
          schema:
            $ref: '#/definitions/Target'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND (Product/SLO do not exist)

  /products/{product_id}/slo/{slo_id}/targets/{id}:
    get:
      tags: [Target]
      summary: Retrieve a SLO Target
      operationId: app.resources.TargetResource.get
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/SLOId'
        - $ref: '#/parameters/ResourceId'
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/Target'
        401:
          description: UNAUTHORIZED.
        404:
          description: NOT FOUND.

    put:
      tags: [Target]
      operationId: app.resources.TargetResource.update
      summary: Update a Product SLO Target
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/SLOId'
        - $ref: '#/parameters/ResourceId'
        - name: target
          in: body
          required: true
          schema:
            $ref: '#/definitions/Target'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Target'
        400:
          description: BAD REQUEST
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND

    delete:
      tags: [Target]
      summary: Delete a Product SLO Target
      operationId: app.resources.TargetResource.delete
      parameters:
        - $ref: '#/parameters/ProductId'
        - $ref: '#/parameters/SLOId'
        - $ref: '#/parameters/ResourceId'
      responses:
        204:
          description: NO CONTENT.
        401:
          description: UNAUTHORIZED.
        404:
          description: NOT FOUND.

  /products/{product_id}/reports/{report_type}:
    get:
      tags: [Report]
      description: Get Product weekly report
      operationId: app.resources.ReportResource.get
      parameters:
        - $ref: '#/parameters/ProductId'
        - name: report_type
          type: string
          in: path
          required: true
          description: Report type [weekly, monthly, quarterly].
        - name: period_to
          type: string
          in: query
          description: |
            Specify the end of time period for the report (in ISO-8601 format).
            Given timezone is ignored and always replaced with UTC.
            Example: '2020-01-13T12:03:15Z'
      responses:
        200:
          description: Generated report
          schema:
            $ref: '#/definitions/Report'
        401:
          description: UNAUTHORIZED
        404:
          description: NOT FOUND (Product does not exist)
